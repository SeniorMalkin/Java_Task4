ј
ArrayList удобен в использовании при вставке элемента в конец
и удалении элемента с конца. “ак как при исчерпании свобожного места
дл€ вставки, он увеличивает размер массива в 1.5 раза,что обеспечивает
на некоторое врем€ максимально дешЄвое добавление элементов.

LinkedList обеспечивает оптимальное врем€ вставки(удалени€) элементов 
из середины списка. Ќачинает выигрывать у ArrayList в данных операци€х
при размере ~ 1.3 млн элементов. ќчевидно,начина€ с данного порога 
перепаковка начинает проигрывать проходу по половине св€зного листа.

¬
HashSet €вл€етс€ самым быстрым, LinkedHashSet €вл€етс€ вторым по 
производительности, почти похож на HashSet, TreeSet медленнее
из-за сортировки, которую он должен выполн€ть при каждой вставке. 
TreeSet обеспечивает гарантированное врем€ O (log (n)) дл€ общих операций,
таких как add, remove и contain, в то врем€ как HashSet и LinkedHashSet
предлагают сложность O(1) дл€ основных операций, при условии низкого числа коллизий.
ѕри большом числе коллизий сложность может выродитьс€ в O(n) (св€зный список)

HashSet не поддерживает пор€док элементов, в то врем€ как LinkedHashSet поддерживает 
пор€док вставки элементов,а TreeSet поддерживает пор€док 
в отсортированном множестве.

C
¬сЄ вышесказанное также верно и дл€ мап, т. к. HashSet и TreeSet содержат в своей основе 
HashMap и TreeMap.